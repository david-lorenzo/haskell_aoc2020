import System.Environment
import qualified Data.Vector as V

puzzle = [
    "LLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLL..LLLLLLL..LLLLLL.LLLLLLLL.L.LLLLLLLLLLL",
    "LLLLL.LL.LLLLLLL.LLLLL.LLLLL.LLLLLLL..LLLLLLLLLLLLLLLL.LLLLLLLLLL.LL.L.LLLLL.LLL.LLLL..LLLLLLLLLLL.",
    "LLLLLLLL.LLLLLLLLL.LLL.LLLL..LLLLLLLL.LLLLLLLLL.LLLLLLLLLLLL.LL.LLLL.LLLLL.L.LLL.LLLLLLLLLLL.LLLL.L",
    "L.LLLLL..LLLLLLL..LLL.LLLLLL.LLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLLLL",
    "LLLLLLLLLLLLLLL...LLLLLLLLL..L.LLLLLLLLLLLLLLLL.LLL.LL.LLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLL.LLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLL.LLLLLLLL..LLLLL",
    "LL.LLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLLLL.LLLL.LL.LLLLLL.LLL.LLL.LLL.LLLLL.LLL.LLLLLLLL..L.LLLLLLLL.L",
    "LLLLLLLL.LLLL.LLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL..LLL.LL.LLLLLLL.LLLLLLLL..LLLLLLLLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLL.LL.LLLLL.LLLLLLLLL.LLLLLL.LLL.L.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLLL.LLLLL.",
    ".L.LL..L.L...L.LL....L...LL......LL..L.L...L.L.LLLLLL..L...LLL..LL..L..............L.L..L.......LL.",
    "LLLLLLLL..LLLLLL.LLL.L.L.LLL.LLL.L.LLLLL.LLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLL.LLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL..LLLLL.LLLLL.L.LLLLLL.LLLLLLLLL.LLLLLL..LLLLL",
    "LLLLLLLL.LLL.LLL.L.LLL.LLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLL.LLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLL",
    ".LLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.L.LLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLL",
    "LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL",
    "LLL.LLLL.LLLLLLL.LLLLLLLLLLL.LLLLLL.L.LLLLLLLLL..LLLLL.LLLLL.LLLL.LL..LL.LLL.LLLLLLLLLLLLLLLLLL.LL.",
    "........LL...L..L....L.LLLLL..L..LL........L.L.L.LL.L.LL..L.LLL.L....LL........L..LLLL.LLL....L....",
    "LLLLLLLL.LLLLLLL.LLLLLLLLLLL.LL.LLLLL.LLLLLLLLL.LLLLLLLLLLLL.LLLLL.L.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL",
    "LLLLLLLL.LL.LLLLLLLLLLLLLLLL.LLLLLLLL.L.LLL.LLL.LLLLLLLLLLLL.LLLLLLL.LLLLL.L.LLLLLLLL.LLLLLL.LLLLLL",
    "L.LLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL..LLLLLL.L.LLL.LL.LLLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLLLL",
    "LLLLLLLLL..L.LLLLLLLLLLLLLLLLLLLLLLLL.L.LLLLLLL.LLLLLL.LLLLLLLLLLLLL.LLLLLL..LLLLLLLL.LLLLLL.LLLLL.",
    "LLLLLLLLLLLLLL.L.LLLLLLLLLLL.LLLLLLL..LLLLLLL.L.LLLLLLLLLLLL.LLLLLL..LLLLLLLL.LLLLLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.L.L.LLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL.LL.LLLLLL.LLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL",
    ".........L.LL...LLL.....LL..LL.....L.L.L.......L..L......LLLL.L...L.L...L.....LL.........L.LL.L..LL",
    "L.LLLLLL.LLLLLLL..LLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLLLLLLLLL.LLLLLL..LLLLLL.LLLLLLLL.LLLL.LLLLLLLL",
    "LLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLL.LLL.LLLL.L.LLLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLL.LLLLLLLLL",
    "LLLLLLLL.LLLLLLL..LLLL.LLLLLLLLLLL.LL.LLLLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLL..LLLLLLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLL..LLLLLLLLLLL.LLLLLLLLLLLLLLLLLL.L.LLLLL.LLLL.LLLLLLL.L.LLLLL..LLLLLLL.LLLL.L...LLLL",
    "L.LLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLL.LLL.LLLLLLL.L.LLLLLLLLLL.LLLLLLL..L.LLLL.LLLLLLL.LLLLLLL.LLLLLL",
    "LLLLL.LL.LLLLLLL..L.LL.LLLLL.LL.LLLLL.LLL.LLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLLL",
    "LL.LLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLLLLLLLLL.LLLL..LLLLLLL.LLLLLLLLLLLLL.LL.LLLLLLLLLLLLL",
    "..L.......L...........LL...L.L....L.........LL.L.LLL.L.........L..LL....L.L....LL.L......LL....L.L.",
    "LLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LL.LLLL.L.LL..LLLLLL.LL.LLLLLL.LLLLLL..LLLLLL.L.LLLLLL.LLLLLL",
    "LL.LL.LL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLLLLLL.L.LLLLLL.L.LLL.LLLLLLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.L.LLLLL.LLLLL.LLLLLLLLLL.LLL..LLLL.LLL.LLLLLL.LLLLL.LLLLLLL.L.LLLLL.LLLLLLLL.LLLLLLLLLLLLL",
    "LLLLLLLLLLLLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLL.LLLL.LLLLLL",
    "LL.LLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLLLL.LLLLLLLLL.LLLLL.LLLLLL.LLLLLL..LLLLLLL.LLLLLLLL.LLLLLLLLLL.LL",
    "L........L.L.L...LL.LLL...L........LL..L...L..LL..LL.L.L....L..L..L.L....L.L.....LLL.L.LL...L...L.L",
    "LLLLLLLL.L.LLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLLL..LL.LLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLL.LLLL.L.LLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLL.LLLLLL.LLLLLLLL.LL.LLLLLLLLLLLLLLLLLLLL.LLL.LLL.LLLLL..LLLLLLLLLLLLL.L",
    "LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.L.LLLLL.LLLLLLLLLLLLLL.LLLL.LL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLL",
    ".LLLLLLL.LLLLLLLLLLLLLLLLLLL.LLL.LLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL..LLLLLLL.LLLLLLLL.LLLL",
    "LLLLLLLLLLLL..LL.LLLLLLLL.LL.LLLLLLLL..LLLLLLLL.LLLLLL.LLLLLLLLL.LLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLLL",
    ".L..L......L.L.LL..L...LL.L...L....L.L.....LLLL...L.L...LL.....L......L..L.L.L.....L.L......L....LL",
    "LLLLLLLLLLLLLLLLL.LLLL.LLL.L.LLLLLLLL..LL.LLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLL.LLLLLL.LLLLLL",
    "LLLLLLLLLLLLLLLLLLLLLLLLL.LL.LLLLLLLLLLLLL.LLLL.LLLLLL.LLLL..LLLLLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLLLLL",
    ".LLLLLLL.L.LLLLLL.LLLLLLLLLL.LLLLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLLLLLLLLLL.LLLLLL.L.LLLLLLLLLLLLL",
    "LLLLLLLLLLL.LLLLLLLLLL.LLLLL.LLLLLLLL..LLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLL.LLLLLL.LLLLLLLL.LLLLL.LL.LLLLLL.LLLLLL.LLLLL.LLLLLLL.L.LLLLLLLLLLLLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLLLLLLLL..LLLLLLLLLLLLLLLLLLLLL.L.LLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLLL.LLLL",
    "LLLLLLLLLLLLL.LL.LLLLLLLLLLL.LLLLL.LL.LLLLL.LLL.LLLLLL.LLLLLLLLLLL.LLLLLLLLLLLL.LLLLL.LLLLLLLLLLLL.",
    "LLLL.LLL.LLLLLLL.LLLLL.LLL.LLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLL..LLLLLLLL..LLLLLLLLLLLL",
    "LLLLLLLL.LLLL.LL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLL..LLLLL.L.LLL.LLLLLLL.LLLLLL.LLLLLLLLLL.LLLLL.LLLLLL",
    ".....LL.L..L..L..LL.............LL...L..L.LLLLL.L.L...L.....L...L.....L....LL.L..L.....LLL.........",
    "LLLLLLLLLLLL.LLL.LLLLLLL.LLLL.LLLLLLL.LLLLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLLLLLL.LL.LL.LL.LLLL.L.LLLLLL",
    "LLLLLLLLLL.LLL.L.LLLLLLLLLLL.LLLLLLLL.LLL..LLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLL.LLL.LLLLLLLL.LLLL",
    "LLL.LLLL.LLL.LLL.LLLLL.LLLL..LLLLL.LL.LL.LLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLLLL",
    "LLLLLLLL.LLLLLL..L.LLLLLLL.L.LLLLLL.L.LLLLLLLLL.LLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLL.LLLLLL",
    "LLLL.LLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLL.LLLLLL.LL.LLLLLL.LLLLL.L.LLLLLLLLLLLLLLLLL.LLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLLL.L.LLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLL.L.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLLLLL.LLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLL.L.LL.LLLL.LLLLLLLLLLLLLLLL.LLLLLL.LLL.LL",
    "LLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL.LLLLLLL.LLLLLLL.LL.LLLLL.LLLLLLLLLLLLL",
    "LLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLL.LLLLL.LLLLLLLLLLLL.LLLLLLLLLLLLLLL.LLL.LLLLLLLLLLL.LLLLLL",
    "..LL..LL..LL......L....L....L....L....L..L...........L.L...L.L.L...LL.L..L..........LLLL.L..L.L....",
    "LLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLL.L..LLL.LLL.LLLLLLLL..LLLLL.LLLLLL",
    "LLLLLLLLLLLLLLLL.LLLLL.LLLLL.LLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.LLLLLLL.LLLLLLL.LLLLLLL..LLLLLL..LLLLL",
    "LLLLLLLL.LLLLLLLLLLLLLLLLLLL.LLL.LLLL.LL.LLLLLL.LLL.LL.LLLLLL.LLLLLL.LLLLLLL.LLLLLLLL.LLLLLLLLLLL.L",
    "LLLL.LLL.LLLLLLL.LLLLLL.LLL..L.LLLLLL.LL.LLLLLLLLL.LLLLLLLLL.L.LLLLLLLL.LLLL.LL.L.LLL.LLLLLL.LLLLLL",
    "LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLL.LLLLLLLL.LLL.LLLL.L.LLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLL",
    "L..LLL.L....L...LL..LLLLL..L...LL.L..L.L...............L.LL.L.....LLL.LL...L..L.LL..L..L...L.......",
    "LLLLLLLL.LL.LLLL.LLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLLLLLLLLLLLLLL.L.LLLLLL.LLLLLLLLL.LLL",
    "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL.LLLL.LLLLLLLLLLLLLLLLLLLLLL.LLLLLLL.LLLLLLLLLLLLLLLL.LLLLLLLLLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLL..LLLLLLLLLLLLLLLLLLLLLL.LLLLLLLLLLLL.L.L.LLLLLLL.LLLL....LLLLL",
    "LLLLLLLLLLLLLLLL.LLLLL.L.LLLLL.LLLLL..LLLLLLLLL..LL.LL.LLLLL.LLLLL.LL.LLLLLLLLLLLLLLLLLLLLL..LLLL.L",
    "LLLLLLLL.LLLLLLL.LLLL..LLLLL.LLLLLLLLLLLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLLLLLLLLLLLLLL.LLL.LLLLL",
    "L.......L....L....L.LL..L.LL...L.L.LL........L......L.......LL.L.L...L...L...LL.L.L.L..............",
    "LLLLLLLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLLLLL.LLLLLLLLLLL..LLLL.LL.LLLLLLL.L.LLLL.L.L.LLLL.LLLLLL",
    "LLLLLLLLLL.LLLLL.LLLLL.L.LLL..LLLL.LLLL.LLLLL.LLLLLLLL.L.LLL.LLLLLLL.LLLLLLLLLLLL.LLL.LLLLLLLLLLLLL",
    "LLLLLLLL.LLLLLLLL.LLLL.LLLLLLLLLLLL.L.LLLLLLLLL.LLLLLL.L.LLLLLLLLLLL.LLLLLLL..LLLLLLL.LLLLLLLLLLLLL",
    "LLLLLLLL.L.LLLL..LLLLL.LLLLL.LLLLLLLLLLLLLLLLL..LLLLLL.LLLLL.LL.LLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL",
    "LLLLLLLL..LLLLLL.LLLLLLLLLLLLLLLLLLL.LLLLLL.LLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLL.LLLL.L..LLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.L.LLLLLLLLL.LLLL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLL.L.LLLLLLLLLL.L.L..LLLL.LLLLLLL.LLLLLLL.LLLLL.LLLLLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLL..LLLLLLLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLL.LLLLLLLLLLLLLLL.LLLLLL",
    "..LL.....L....L...L.LL........LL.L........L....L....L.L....LLL.L....LLLLLL.L.L.L..LLL.L.L.L..LL..LL",
    "LLLL.LLL.LLLLLL.LLLLLL.LLLLLLLLLLLLL.LLLLLLLLLLLLLLLLL.LLLLL.LLLLLLLLLLLLLLL.LLLLLLLL.LLLLL.LLLLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLL..LLLLLLLL.LLLLLL.LL.L.LLLL.LLLLL.LLL.LLL.LLLLLLL.LLLLL.LLLLLLLLL.LLLLL.",
    "LLLLLLLLLLLLLLLLLLLL.L.LLLLLLLLLLLLLL.LLLL.LLLL.LLLLLL.LLLLL..LLLLLL.LLLLLLL.LLLLL.LL.LLLLLL.LLLLLL",
    "LLLLLLLL.LLLLLLLLLLLLL.LLLLL.LLLLLLLL.LLLLLLLLL.LLL.LL.L.LLLLLLLL.LLLLLLLLLL.LLLLLLLLLLLLLLLL.LLLLL",
    "LLLLLLLL.LLLLLLL.LLLLL.LLLLLLLLLLLLLL.LLLL.LLLL.LLLLLL.LLLLL.LLLLLLL.LLLLLLLLLL.LLLLL.LLLLLL.LLLLLL",
    "LLL.LLLLLLLLLLLL.LLLLL.LLL.LLLLLLLLLLLLLLLLLLLLLLL.LLL.LLLLL.LLLLLLL.LLLLLLL.LLLL.LLL.LLLLLL.LLLLLL"
  ]

main = do
  --inputFilePath <- head <$> getArgs
  --let inputFilePath = "../input11.txt"
  --let inputFilePath = "input11.txt"
  --inputLines <- lines <$> readFile inputFilePath
  let m0 = createMatrix $ map (map charToSeat) puzzle
  -- Part 1
  let states = iterate (conwayMatrix conwayCell) m0
  let state1 = fst . head . filter (uncurry (==)) $ zip states (tail states)
  let res1 = length . filter (==B) . concatMap V.toList . V.toList $ state1
  putStrLn . ("Part 1: " ++) . show $ res1
  -- Part 2
  let states2 = iterate (conwayMatrix conwayCell2) m0
  let state2 = fst . head . filter (uncurry (==)) $ zip states2 (tail states2)
  let res2 = length . filter (==B) . concatMap V.toList . V.toList $ state2
  putStrLn . ("Part 2: " ++) . show $ res2
--   let m1 = conwayMatrix conwayCell2 m0
--   let l1 = map (map seatToChar . V.toList) $ V.toList m1
--   let convert = map (map seatToChar . V.toList) . V.toList
--   mapM_ (\x -> do mapM_ putStrLn x >> putStrLn "") $ take 3 $ map convert states2


data Seat = E | B | F deriving (Show, Eq)

charToSeat 'L' = E
charToSeat '#' = B
charToSeat '.' = F

seatToChar E = 'L'
seatToChar B = '#'
seatToChar F = '.'

mSize m = (V.length m, (V.length . V.head) m)

createMatrix = V.fromList . map V.fromList

cell mtx y x = (mtx V.! y) V.! x


conwayCell mtx i j = case cell mtx i j of
                    F -> F
                    E -> if bns == 0 then B else E
                    B -> if bns >= 4 then E else B
  where (height, width) = mSize mtx
        bns = length . filter (== B) $ ns
        ns = [cell mtx y x | y <- [i-1, i, i+1]
                           , x <- if y == i then [j-1, j+1] else [j-1, j, j+1]
                           , y >= 0, y < height
                           , x >= 0, x < width]


conwayCell2 mtx i j = case cell mtx i j of
                        F -> F
                        E -> if bns == 0 then B else E
                        B -> if bns >= 5 then E else B
  where (height, width) = mSize mtx
        (lastRowIdx, lastColIdx) = (height-1, width-1)
        lineOfSight []     = []
        lineOfSight (F:xs) = lineOfSight xs
        lineOfSight (x:_)  = [x]
        n  = lineOfSight [cell mtx y j | y <- [(i-1),(i-2)..0]]
        s  = lineOfSight [cell mtx y j | y <- [(i+1),(i+2)..lastRowIdx]]
        w  = lineOfSight [cell mtx i x | x <- [(j-1),(j-2)..0]]
        e  = lineOfSight [cell mtx i x | x <- [(j+1),(j+2)..lastColIdx]]
        nw = lineOfSight [cell mtx y x | (y, x) <- zip [(i-1),(i-2)..0]          [(j-1),(j-2)..0] ]
        ne = lineOfSight [cell mtx y x | (y, x) <- zip [(i-1),(i-2)..0]          [(j+1),(j+2)..lastColIdx] ]
        sw = lineOfSight [cell mtx y x | (y, x) <- zip [(i+1),(i+2)..lastRowIdx] [(j-1),(j-2)..0] ]
        se = lineOfSight [cell mtx y x | (y, x) <- zip [(i+1),(i+2)..lastRowIdx] [(j+1),(j+2)..lastColIdx] ]
        bns = length . filter (==B) $ concat [n, s, w, e, nw, ne, sw, se]

conwayMatrix conway mtx = createMatrix [[conway mtx y x | x <- [0..lastColIx]] | y <- [0..lastRowIx]]
  where lastRowIx = V.length mtx - 1
        lastColIx = (V.length $ V.head mtx) - 1


